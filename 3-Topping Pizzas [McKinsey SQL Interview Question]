# 3-Topping Pizzas [McKinsey SQL Interview Question]

#### Link - https://datalemur.com/questions/pizzas-topping-cost

You’re a consultant for a major pizza chain that will be running a promotion where all 3-topping pizzas will be sold for a fixed price, and are trying to understand the costs involved.

Given a list of pizza toppings, consider all the possible 3-topping pizzas, and print out the total cost of those 3 toppings. Sort the results with the highest total cost on the top followed by pizza toppings in ascending order.

Break ties by listing the ingredients in alphabetical order, starting from the first ingredient, followed by the second and third.

P.S. Be careful with the spacing (or lack of) between each ingredient. Refer to our Example Output.

Notes:
Do not display pizzas where a topping is repeated. For example, ‘Pepperoni,Pepperoni,Onion Pizza’.
Ingredients must be listed in alphabetical order. For example, 'Chicken,Onions,Sausage'. 'Onion,Sausage,Chicken' is not acceptable.


# Add a dummy column for cross join
pizza_toppings['dummy'] = 1

# Perform cross join to generate all 3-topping combinations
cross_joined = pizza_toppings.merge(pizza_toppings, on='dummy').merge(pizza_toppings, on='dummy')

# Select and rename the necessary columns
cross_joined = cross_joined[['topping_name_x', 'ingredient_cost_x', 'topping_name_y', 'ingredient_cost_y', 'topping_name', 'ingredient_cost']]

# Apply the filters: p1.topping_name < p2.topping_name and p2.topping_name < p3.topping_name
filtered_combinations = cross_joined[
    (cross_joined['topping_name_x'] < cross_joined['topping_name_y']) &
    (cross_joined['topping_name_y'] < cross_joined['topping_name'])
]

# Calculate the total cost and create the pizza name
filtered_combinations['pizza'] = filtered_combinations.apply(
    lambda row: f"{row['topping_name_x']},{row['topping_name_y']},{row['topping_name']}", axis=1
)
filtered_combinations['total_cost'] = filtered_combinations['ingredient_cost_x'] + filtered_combinations['ingredient_cost_y'] + filtered_combinations['ingredient_cost']

# Sort by total cost in descending order and then by pizza name
sorted_combinations = filtered_combinations.sort_values(by=['total_cost', 'pizza'], ascending=[False, True])

# Print the results
for _, row in sorted_combinations.iterrows():
    print(f"{row['pizza']} Pizza: ${row['total_cost']:.2f}")



# ***********************************************PostgreSQL***********************************************#
select 
concat(p1.topping_name,',',p2.topping_name,',',
          p3.topping_name) as pizza
,p1.ingredient_cost + p2.ingredient_cost + p3.ingredient_cost AS total_cost
from pizza_toppings p1
cross join pizza_toppings p2
cross join pizza_toppings p3
where p1.topping_name < p2.topping_name
  and p2.topping_name < p3.topping_name
order by total_cost desc ,Pizza;






